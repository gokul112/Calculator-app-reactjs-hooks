{"ast":null,"code":"import { useState } from 'react';\nimport { evaluate } from 'mathjs';\nexport default (initialState => {\n  const data = [{\n    id: \"1\",\n    value: \"1\"\n  }, {\n    id: \"2\",\n    value: \"2\"\n  }, {\n    id: \"3\",\n    value: \"3\"\n  }, {\n    id: \"4\",\n    value: \"4\"\n  }, {\n    id: \"5\",\n    value: \"5\"\n  }, {\n    id: \"6\",\n    value: \"6\"\n  }, {\n    id: \"7\",\n    value: \"7\"\n  }, {\n    id: \"8\",\n    value: \"8\"\n  }, {\n    id: \"9\",\n    value: \"9\"\n  }, {\n    id: \"0\",\n    value: \"0\"\n  }, {\n    id: \"add\",\n    value: \"+\"\n  }, {\n    id: \"sub\",\n    value: \"-\"\n  }, {\n    id: \"multi\",\n    value: \"*\"\n  }, {\n    id: \"div\",\n    value: \"/\"\n  }, {\n    id: \"deci\",\n    value: \".\"\n  }, {\n    id: \"equal\",\n    value: \"=\"\n  }, {\n    id: \"clear\",\n    value: \"Clear\"\n  }, {\n    id: \"AC\",\n    value: \"AC\"\n  }];\n  const [keyInput, setKeyInput] = useState(initialState);\n  return {\n    keyInput,\n    setInput: e => {\n      setKeyInput(e.target.value);\n    },\n    handleChange: handleChange => {\n      switch (handleChange) {\n        case '=':\n          try {\n            setKeyInput(evaluate(keyInput));\n          } catch (e) {\n            alert(\"error\");\n          }\n\n          break;\n\n        case \"Clear\":\n          if (keyInput.length > 0) setKeyInput(keyInput.substring(0, keyInput.length - 1));\n          break;\n\n        case \"AC\":\n          setKeyInput(\"\");\n          break;\n\n        default:\n          setKeyInput(prevState => prevState + handleChange);\n          break;\n      }\n    },\n    data\n  };\n});","map":{"version":3,"sources":["/Users/graj/projects/calculator/src/components/usetoState.js"],"names":["useState","evaluate","initialState","data","id","value","keyInput","setKeyInput","setInput","e","target","handleChange","alert","length","substring","prevState"],"mappings":"AAAC,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,QAAzB;AAGD,gBAAgBC,YAAD,IAAkB;AAE7B,QAAMC,IAAI,GAAG,CACT;AAACC,IAAAA,EAAE,EAAC,GAAJ;AAAQC,IAAAA,KAAK,EAAC;AAAd,GADS,EAET;AAACD,IAAAA,EAAE,EAAC,GAAJ;AAAQC,IAAAA,KAAK,EAAC;AAAd,GAFS,EAGT;AAACD,IAAAA,EAAE,EAAC,GAAJ;AAAQC,IAAAA,KAAK,EAAC;AAAd,GAHS,EAIT;AAACD,IAAAA,EAAE,EAAC,GAAJ;AAAQC,IAAAA,KAAK,EAAC;AAAd,GAJS,EAKT;AAACD,IAAAA,EAAE,EAAC,GAAJ;AAAQC,IAAAA,KAAK,EAAC;AAAd,GALS,EAMT;AAACD,IAAAA,EAAE,EAAC,GAAJ;AAAQC,IAAAA,KAAK,EAAC;AAAd,GANS,EAOT;AAACD,IAAAA,EAAE,EAAC,GAAJ;AAAQC,IAAAA,KAAK,EAAC;AAAd,GAPS,EAQT;AAACD,IAAAA,EAAE,EAAC,GAAJ;AAAQC,IAAAA,KAAK,EAAC;AAAd,GARS,EAST;AAACD,IAAAA,EAAE,EAAC,GAAJ;AAAQC,IAAAA,KAAK,EAAC;AAAd,GATS,EAUT;AAACD,IAAAA,EAAE,EAAC,GAAJ;AAAQC,IAAAA,KAAK,EAAC;AAAd,GAVS,EAWT;AAACD,IAAAA,EAAE,EAAC,KAAJ;AAAUC,IAAAA,KAAK,EAAC;AAAhB,GAXS,EAYT;AAACD,IAAAA,EAAE,EAAC,KAAJ;AAAUC,IAAAA,KAAK,EAAC;AAAhB,GAZS,EAaT;AAACD,IAAAA,EAAE,EAAC,OAAJ;AAAYC,IAAAA,KAAK,EAAC;AAAlB,GAbS,EAcT;AAACD,IAAAA,EAAE,EAAC,KAAJ;AAAUC,IAAAA,KAAK,EAAC;AAAhB,GAdS,EAeT;AAACD,IAAAA,EAAE,EAAC,MAAJ;AAAWC,IAAAA,KAAK,EAAC;AAAjB,GAfS,EAgBT;AAACD,IAAAA,EAAE,EAAC,OAAJ;AAAYC,IAAAA,KAAK,EAAC;AAAlB,GAhBS,EAiBT;AAACD,IAAAA,EAAE,EAAC,OAAJ;AAAYC,IAAAA,KAAK,EAAC;AAAlB,GAjBS,EAkBT;AAACD,IAAAA,EAAE,EAAC,IAAJ;AAASC,IAAAA,KAAK,EAAC;AAAf,GAlBS,CAAb;AAqBA,QAAM,CAACC,QAAD,EAAUC,WAAV,IAAyBP,QAAQ,CAACE,YAAD,CAAvC;AAEA,SAAM;AACNI,IAAAA,QADM;AAENE,IAAAA,QAAQ,EAAIC,CAAD,IAAO;AACdF,MAAAA,WAAW,CAACE,CAAC,CAACC,MAAF,CAASL,KAAV,CAAX;AACH,KAJK;AAKLM,IAAAA,YAAY,EAAIA,YAAD,IAAkB;AAChC,cAAOA,YAAP;AACE,aAAK,GAAL;AACI,cAAG;AACDJ,YAAAA,WAAW,CAACN,QAAQ,CAACK,QAAD,CAAT,CAAX;AACD,WAFD,CAEE,OAAMG,CAAN,EAAQ;AACRG,YAAAA,KAAK,CAAC,OAAD,CAAL;AACD;;AACD;;AACJ,aAAK,OAAL;AACI,cAAGN,QAAQ,CAACO,MAAT,GAAgB,CAAnB,EACEN,WAAW,CAACD,QAAQ,CAACQ,SAAT,CAAmB,CAAnB,EAAsBR,QAAQ,CAACO,MAAT,GAAkB,CAAxC,CAAD,CAAX;AACF;;AACJ,aAAK,IAAL;AACIN,UAAAA,WAAW,CAAC,EAAD,CAAX;AACA;;AACJ;AACIA,UAAAA,WAAW,CAACQ,SAAS,IAAIA,SAAS,GAAGJ,YAA1B,CAAX;AACA;AAjBN;AAmBD,KAzBK;AA0BNR,IAAAA;AA1BM,GAAN;AA4BH,CArDD","sourcesContent":[" import {useState} from 'react';\n import { evaluate } from 'mathjs';\n\n\nexport default (initialState) => {\n\n    const data = [\n        {id:\"1\",value:\"1\"},\n        {id:\"2\",value:\"2\"},\n        {id:\"3\",value:\"3\"},\n        {id:\"4\",value:\"4\"},\n        {id:\"5\",value:\"5\"},\n        {id:\"6\",value:\"6\"},\n        {id:\"7\",value:\"7\"},\n        {id:\"8\",value:\"8\"},\n        {id:\"9\",value:\"9\"},\n        {id:\"0\",value:\"0\"},\n        {id:\"add\",value:\"+\"},\n        {id:\"sub\",value:\"-\"},\n        {id:\"multi\",value:\"*\"},\n        {id:\"div\",value:\"/\"},\n        {id:\"deci\",value:\".\"},\n        {id:\"equal\",value:\"=\"},\n        {id:\"clear\",value:\"Clear\"},\n        {id:\"AC\",value:\"AC\"}\n        ]\n\n    const [keyInput,setKeyInput] = useState(initialState);\n\n    return{\n    keyInput,\n    setInput : (e) => {\n        setKeyInput(e.target.value)\n    }\n    ,handleChange : (handleChange) => {\n      switch(handleChange) {\n        case '=':\n            try{\n              setKeyInput(evaluate(keyInput));     \n            } catch(e){\n              alert(\"error\");\n            }\n            break;\n        case \"Clear\":\n            if(keyInput.length>0) \n              setKeyInput(keyInput.substring(0, keyInput.length - 1));\n            break;\n        case \"AC\":\n            setKeyInput(\"\");\n            break;\n        default:\n            setKeyInput(prevState => prevState + handleChange );\n            break;\n      }\n    },\n    data\n  };\n}\n"]},"metadata":{},"sourceType":"module"}