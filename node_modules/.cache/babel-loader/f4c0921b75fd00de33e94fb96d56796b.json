{"ast":null,"code":"import { useState } from 'react';\nimport { evaluate } from 'mathjs';\nexport default (initialState => {\n  const [keyInput, setKeyInput] = useState(initialState);\n  return {\n    keyInput,\n    setInput: e => {\n      setKeyInput(e.target.value);\n    },\n    handleChange: handleChange => {\n      switch (handleChange) {\n        case '=':\n          try {\n            setKeyInput(evaluate(keyInput));\n          } catch (e) {\n            alert(\"error\");\n          }\n\n          break;\n\n        case \"Clear\":\n          if (keyInput.length > 0) setKeyInput(keyInput.substring(0, keyInput.length - 1));\n          break;\n\n        case \"AC\":\n          setKeyInput(\"\");\n          break;\n\n        default:\n          setKeyInput(prevState => prevState + handleChange);\n          break;\n      }\n    }\n  };\n});","map":{"version":3,"sources":["/Users/graj/projects/calculator/src/components/usetoState.js"],"names":["useState","evaluate","initialState","keyInput","setKeyInput","setInput","e","target","value","handleChange","alert","length","substring","prevState"],"mappings":"AAAC,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,QAAzB;AAGD,gBAAgBC,YAAD,IAAkB;AAE7B,QAAM,CAACC,QAAD,EAAUC,WAAV,IAAyBJ,QAAQ,CAACE,YAAD,CAAvC;AAEA,SAAM;AACNC,IAAAA,QADM;AAENE,IAAAA,QAAQ,EAAIC,CAAD,IAAO;AACdF,MAAAA,WAAW,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACH,KAJK;AAKLC,IAAAA,YAAY,EAAIA,YAAD,IAAkB;AAChC,cAAOA,YAAP;AACE,aAAK,GAAL;AACI,cAAG;AACDL,YAAAA,WAAW,CAACH,QAAQ,CAACE,QAAD,CAAT,CAAX;AACD,WAFD,CAEE,OAAMG,CAAN,EAAQ;AACRI,YAAAA,KAAK,CAAC,OAAD,CAAL;AACD;;AACD;;AACJ,aAAK,OAAL;AACI,cAAGP,QAAQ,CAACQ,MAAT,GAAgB,CAAnB,EACEP,WAAW,CAACD,QAAQ,CAACS,SAAT,CAAmB,CAAnB,EAAsBT,QAAQ,CAACQ,MAAT,GAAkB,CAAxC,CAAD,CAAX;AACF;;AACJ,aAAK,IAAL;AACIP,UAAAA,WAAW,CAAC,EAAD,CAAX;AACA;;AACJ;AACIA,UAAAA,WAAW,CAACS,SAAS,IAAIA,SAAS,GAAGJ,YAA1B,CAAX;AACA;AAjBN;AAoBD;AA1BK,GAAN;AA4BH,CAhCD","sourcesContent":[" import {useState} from 'react';\n import { evaluate } from 'mathjs';\n\n\nexport default (initialState) => {\n\n    const [keyInput,setKeyInput] = useState(initialState);\n\n    return{\n    keyInput,\n    setInput : (e) => {\n        setKeyInput(e.target.value)\n    }\n    ,handleChange : (handleChange) => {\n      switch(handleChange) {\n        case '=':\n            try{\n              setKeyInput(evaluate(keyInput));     \n            } catch(e){\n              alert(\"error\");\n            }\n            break;\n        case \"Clear\":\n            if(keyInput.length>0) \n              setKeyInput(keyInput.substring(0, keyInput.length - 1));\n            break;\n        case \"AC\":\n            setKeyInput(\"\");\n            break;\n        default:\n            setKeyInput(prevState => prevState + handleChange );\n            break;\n      }\n     \n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}