{"version":3,"sources":["components/Header.js","components/Keypad.js","components/App.js","components/usetoState.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","Keypad","type","id","value","onClick","e","preventDefault","handleChange","target","App","initialState","useState","keyInput","setKeyInput","setInput","evaluate","alert","length","substring","prevState","data","usetoState","name","onChange","map","val","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6MAUeA,G,WARA,SAACC,GACZ,OACI,yBAAKC,UAAU,cACX,4BAAKD,EAAME,UCQRC,EAVA,SAACH,GAMZ,OACQ,4BAAQI,KAAK,SAASH,UAAWD,EAAMK,GAAIC,MAAON,EAAMM,MAAOC,QANlD,SAACC,GAClBA,EAAEC,iBACFT,EAAMU,aAAaF,EAAEG,OAAOL,SAI+DN,EAAMM,Q,gBCgB1FM,MAnBf,WAAgB,IAAD,ECHA,SAACC,GAEZ,IAF6B,EAuBEC,mBAASD,GAvBX,mBAuBtBE,EAvBsB,KAuBbC,EAvBa,KAyB7B,MAAM,CACND,WACAE,SAAW,SAACT,GACRQ,EAAYR,EAAEG,OAAOL,QAExBI,aAAe,SAACA,GACf,OAAOA,GACL,IAAK,IACD,IACEM,EAAYE,YAASH,IACrB,MAAMP,GACNW,MAAM,SAER,MACJ,IAAK,QACEJ,EAASK,OAAO,GACjBJ,EAAYD,EAASM,UAAU,EAAGN,EAASK,OAAS,IACtD,MACJ,IAAK,KACDJ,EAAY,IACZ,MACJ,QACIA,GAAY,SAAAM,GAAS,OAAIA,EAAYZ,OAI7Ca,KAjDa,CACT,CAAClB,GAAG,IAAIC,MAAM,KACd,CAACD,GAAG,IAAIC,MAAM,KACd,CAACD,GAAG,IAAIC,MAAM,KACd,CAACD,GAAG,IAAIC,MAAM,KACd,CAACD,GAAG,IAAIC,MAAM,KACd,CAACD,GAAG,IAAIC,MAAM,KACd,CAACD,GAAG,IAAIC,MAAM,KACd,CAACD,GAAG,IAAIC,MAAM,KACd,CAACD,GAAG,IAAIC,MAAM,KACd,CAACD,GAAG,IAAIC,MAAM,KACd,CAACD,GAAG,MAAMC,MAAM,KAChB,CAACD,GAAG,MAAMC,MAAM,KAChB,CAACD,GAAG,QAAQC,MAAM,KAClB,CAACD,GAAG,MAAMC,MAAM,KAChB,CAACD,GAAG,OAAOC,MAAM,KACjB,CAACD,GAAG,QAAQC,MAAM,KAClB,CAACD,GAAG,QAAQC,MAAM,SAClB,CAACD,GAAG,KAAKC,MAAM,QDfyBkB,CAAW,IAAlDT,EAFM,EAENA,SAASL,EAFH,EAEGA,aAAaO,EAFhB,EAEgBA,SAASM,EAFzB,EAEyBA,KAEtC,OACE,yBAAKtB,UAAU,OACX,kBAAC,EAAD,CAAQC,MAAM,mBACd,yBAAKD,UAAU,UACb,yBAAKA,UAAU,aACb,2BAAOG,KAAK,OAAOqB,KAAK,WAAWnB,MAAOS,EAAUW,SAAUT,KAE/DM,EAAKI,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,CAAQC,IAAKD,EAAIvB,GAAIA,GAAIuB,EAAIvB,GAAIC,MAAOsB,EAAItB,MAAOI,aAAcA,UEPzDoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.21915e4f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) =>{\n    return(\n        <div className=\"App-header\">\n            <h2>{props.title}</h2>\n        </div>\n    )\n\n}\nexport default Header;","import React from 'react';\nimport '../App.css';\n\nconst Keypad = (props) => {\n    const onclickvalue = (e) => {\n        e.preventDefault();\n        props.handleChange(e.target.value);\n    }\n\n    return( \n            <button type=\"button\" className={props.id} value={props.value} onClick={onclickvalue}>{props.value}</button>\n    )\n}\nexport default Keypad;","import React from 'react';\nimport '../App.css';\nimport Header from './Header';\nimport Keypad from './Keypad';\nimport usetoState from './usetoState';\n\n\nfunction App() {\n\n  const {keyInput,handleChange,setInput,data} = usetoState(\"\");\n\n  return (\n    <div className=\"App\">\n        <Header title=\"Calculator App\"/>\n        <div className=\"keypad\">\n          <div className=\"key-input\">\n            <input type=\"text\" name=\"keyinput\" value={keyInput} onChange={setInput} />\n          </div>\n          {data.map((val)=>(\n            <Keypad key={val.id} id={val.id} value={val.value} handleChange={handleChange}/>\n          ))}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n"," import {useState} from 'react';\n import { evaluate } from 'mathjs';\n\n\nexport default (initialState) => {\n\n    const data = [\n        {id:\"1\",value:\"1\"},\n        {id:\"2\",value:\"2\"},\n        {id:\"3\",value:\"3\"},\n        {id:\"4\",value:\"4\"},\n        {id:\"5\",value:\"5\"},\n        {id:\"6\",value:\"6\"},\n        {id:\"7\",value:\"7\"},\n        {id:\"8\",value:\"8\"},\n        {id:\"9\",value:\"9\"},\n        {id:\"0\",value:\"0\"},\n        {id:\"add\",value:\"+\"},\n        {id:\"sub\",value:\"-\"},\n        {id:\"multi\",value:\"*\"},\n        {id:\"div\",value:\"/\"},\n        {id:\"deci\",value:\".\"},\n        {id:\"equal\",value:\"=\"},\n        {id:\"clear\",value:\"Clear\"},\n        {id:\"AC\",value:\"AC\"}\n        ]\n\n    const [keyInput,setKeyInput] = useState(initialState);\n\n    return{\n    keyInput,\n    setInput : (e) => {\n        setKeyInput(e.target.value)\n    }\n    ,handleChange : (handleChange) => {\n      switch(handleChange) {\n        case '=':\n            try{\n              setKeyInput(evaluate(keyInput));     \n            } catch(e){\n              alert(\"error\");\n            }\n            break;\n        case \"Clear\":\n            if(keyInput.length>0) \n              setKeyInput(keyInput.substring(0, keyInput.length - 1));\n            break;\n        case \"AC\":\n            setKeyInput(\"\");\n            break;\n        default:\n            setKeyInput(prevState => prevState + handleChange );\n            break;\n      }\n    },\n    data\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}